package loadtest

import (
	"fmt"
	"os"
	"path"
)

// PlotSingleTestSummaryResults will look in the given `inputDir` for a
// `summary.csv` file (generated by the single-test load testing) and write the
// relevant Chart.js files out to the given `outputDir` (one for each histogram,
// basically).
func PlotSingleTestSummaryResults(inputDir, outputDir string) error {
	// ensure the output path exists
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return fmt.Errorf("Failed to create output directory %s: %s", outputDir, err.Error())
	}
	summaryStatsFile := path.Join(inputDir, "summary.csv")
	stats, err := ReadCombinedStatsFromFile(summaryStatsFile)
	if err != nil {
		return fmt.Errorf("Failed to read combined stats from file %s: %s", summaryStatsFile, err.Error())
	}
	cfgFile := path.Join(inputDir, "config.toml")
	cfg, err := LoadConfig(cfgFile)
	if err != nil {
		return fmt.Errorf("Failed to load configuration from file %s: %s", cfgFile, err.Error())
	}
	result, err := RenderSingleTestSummaryPlot(cfg, stats)
	if err != nil {
		return fmt.Errorf("Failed to render summary plot: %s", err.Error())
	}
	outputFile := path.Join(outputDir, "single-test-summary.html")
	f, err := os.Create(outputFile)
	if err != nil {
		return fmt.Errorf("Failed to create output file %s: %s", outputFile, err.Error())
	}
	defer f.Close()
	if _, err := f.Write([]byte(result)); err != nil {
		return fmt.Errorf("Failed to write output template to %s: %s", outputFile, err.Error())
	}
	return nil
}
