---
- hosts:
    - tok0
    - tok1
    - tok2
    - tok3
    - tak0
  become: yes
  vars:
    # set fast_mode to yes to speed up this Ansible playbook significantly
    # (assuming all the relevant software's already installed)
    fast_mode: no
    fetch_results_only: no
    debug_mode: no
    loadtest_user: "loadtest"
    loadtest_group: "loadtest"
    loadtest_home: "/home/{{ loadtest_user }}"
    loadtest_master_node: tok0
    loadtest_master_hostaddr: 172.31.6.229 # Use internal IP of host as ports are blocked externally
    local_results_dir: "/tmp/003-kvstore-loadtest-distributed"
    binaries:
      tmloadtest: "{{ lookup('env', 'GOPATH') }}/src/github.com/tendermint/networks/build/tm-load-test"
    # master node configuration
    master:
      bind: "{{ loadtest_master_hostaddr }}:35000"
      expect_slaves: 4
      expect_slaves_within: "1m"
      results_dir: "/tmp/003-kvstore-loadtest-distributed"
    # slave node configuration
    slave:
      bind: "{{ inventory_hostname }}:35000"
      master: "{{ loadtest_master_hostaddr }}:35000"
    # test network configuration
    test_network:
      enable_prometheus: "true"
      rpc_port: 26657
      prometheus_port: 26660
      prometheus_poll_interval: "10s"
      prometheus_poll_timeout: "1s"
      targets:
        - { id: "tik0", host: "tik0.sredev.co", prometheus_host: "172.31.7.28" }
        - { id: "tik1", host: "tik1.sredev.co", prometheus_host: "172.31.1.213" }
        - { id: "tik2", host: "tik2.sredev.co", prometheus_host: "172.31.6.31" }
        - { id: "tik3", host: "tik3.sredev.co", prometheus_host: "172.31.15.61" }
    # client configuration
    clients:
      type: "tmrpc"
      spawn: 1000
      spawn_rate: 20
      max_interactions: 10000
      max_test_time: "10m"
      request_wait_min: "1000ms"
      request_wait_max: "1000ms"
      request_timeout: "5s"
      interaction_timeout: "11s"
  tasks:
    - name: Install tm-load-test
      include: ../../common/ansible/install-tm-load-test.yml
      when: (not fast_mode) and (not fetch_results_only)

    - name: Configure the permissions for the loadtest user home folder
      file:
        path: "{{ loadtest_home }}"
        owner: "{{ loadtest_user }}"
        group: "{{ loadtest_group }}"
      when: (not fast_mode) and (not fetch_results_only)

    - name: Deploy the load test execution script
      copy:
        src: scripts/execute-load-test.sh
        dest: "{{ loadtest_home }}/execute-load-test.sh"
        owner: "{{ loadtest_user }}"
        group: "{{ loadtest_group }}"
        mode: "u=rwx,g=rwx,o=rx"
      when: (not fast_mode) and (not fetch_results_only)

    - name: Deploy the configuration
      template:
        src: templates/config.toml.jinja2
        dest: "{{ loadtest_home }}/config.toml"
        owner: "{{ loadtest_user }}"
        group: "{{ loadtest_group }}"
      when: (not fetch_results_only)

    - name: Execute the load test
      shell: |
        INVENTORY_HOSTNAME={{ inventory_hostname }} \
          MASTER_NODE={{ loadtest_master_node }} \
          DEBUG_MODE={{ debug_mode }} \
          ./execute-load-test.sh > stdout.log 2>&1
      args:
        chdir: "{{ loadtest_home }}"
      ignore_errors: yes # We want the logs regardless of whether or not this is successful
      when: (not fetch_results_only)

    - name: Fetch the load test log files
      fetch:
        src: "{{ item }}"
        dest: "{{ local_results_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: no
      with_items:
        - "{{ loadtest_home }}/stdout.log"

    - name: Fetch load test statistics
      fetch:
        src: "{{ master.results_dir }}/{{ item.id }}.csv"
        dest: "{{ local_results_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: no
      with_items: "{{ test_network.targets }}"
      when: inventory_hostname == loadtest_master_node
